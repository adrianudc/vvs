group 'vvs-practica3'
version '1.0-SNAPSHOT'

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'cobertura'
apply plugin: 'checkstyle'
apply plugin: "info.solidsoft.pitest"

sourceCompatibility = 1.7

test {
    testLogging {
        // set options for log level LIFECYCLE
        events "passed", "skipped", "failed"
        exceptionFormat "short"

        // set options for log level DEBUG
        debug {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
        }
    }
}

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'net.saliman:gradle-cobertura-plugin:2.2.4'
        classpath "info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.10"
    }
}

repositories {
    mavenCentral()
    jcenter()
}

checkstyle {
    configFile = file("${project.rootDir}/config/checkstyle.xml")
    ignoreFailures = true
    toolVersion = '6.7'
}

dependencies {
    // Commons
    compile 'org.apache.httpcomponents:httpclient:4.5.1'
    compile 'com.google.guava:guava:18.0'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'commons-io:commons-io:2.4'
    compile 'org.op4j:op4j:1.2'
    // JSON
    compile 'com.fasterxml.jackson.core:jackson-core:2.6.2'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.2'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.6.2'
    compile 'org.apache.commons:commons-collections4:4.0'

    // Test
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile "org.mockito:mockito-core:1.+"
    compile 'com.google.code.jetm:jetm-maven-plugin:1.0.2'
}
cobertura {
    coverageFormats = ['html', 'xml']
    coverageIgnoreTrivial = true
    coverageIgnores = ['org.slf4j.Logger.*']
    coverageReportDir = new File("$buildDir/reports/cobertura")
}

pitest {
    targetClasses = ['modelo.*', 'util.*', 'test.*']  //by default "${project.group}.*"
    pitestVersion = "1.1.10" //not needed when a default PIT version should be used
    threads = 4
    outputFormats = ['XML', 'HTML']
}

test.finalizedBy(project.tasks.cobertura)